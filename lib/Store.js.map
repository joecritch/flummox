{"version":3,"sources":["../src/Store.js"],"names":[],"mappings":"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","file":"src/Store.js","sourcesContent":["/**\n * Store\n *\n * Stores hold application state. They respond to actions sent by the dispatcher\n * and broadcast change events to listeners, so they can grab the latest data.\n * The key thing to remember is that the only way stores receive information\n * from the outside world is via the dispatcher.\n */\n\nimport EventEmitter from 'eventemitter3';\nimport assign from 'object-assign';\n\nexport default class Store extends EventEmitter {\n\n  /**\n   * Stores are initialized with a reference\n   * @type {Object}\n   */\n  constructor() {\n    this.state = null;\n\n    this._handlers = {};\n    this._asyncHandlers = {};\n    this._catchAllHandlers = [];\n    this._catchAllAsyncHandlers = {\n      begin: [],\n      success: [],\n      failure: [],\n    };\n  }\n\n  setState(newState) {\n    // Do a transactional state update if a function is passed\n    if (typeof newState === 'function') {\n      const prevState = this._isHandlingDispatch\n        ? this._pendingState\n        : this.state;\n\n      newState = newState(prevState);\n    }\n\n    if (this._isHandlingDispatch) {\n      this._pendingState = this._assignState(this._pendingState, newState);\n      this._emitChangeAfterHandlingDispatch = true;\n    } else {\n      this.state = this._assignState(this.state, newState);\n      this.emit('change');\n    }\n  }\n\n  replaceState(newState) {\n    if (this._isHandlingDispatch) {\n      this._pendingState = this._assignState(undefined, newState);\n      this._emitChangeAfterHandlingDispatch = true;\n    } else {\n      this.state = this._assignState(undefined, newState);\n      this.emit('change');\n    }\n  }\n\n  getStateAsObject() {\n    return this.state;\n  }\n\n  static assignState(oldState, newState) {\n    return assign({}, oldState, newState);\n  }\n\n  _assignState(...args){\n    return (this.constructor.assignState || Store.assignState)(...args);\n  }\n\n  forceUpdate() {\n    if (this._isHandlingDispatch) {\n      this._emitChangeAfterHandlingDispatch = true;\n    } else {\n      this.emit('change');\n    }\n  }\n\n  register(actionId, handler) {\n    actionId = ensureActionId(actionId);\n\n    if (typeof handler !== 'function') return;\n\n    this._handlers[actionId] = handler.bind(this);\n  }\n\n  registerAsync(actionId, beginHandler, successHandler, failureHandler) {\n    actionId = ensureActionId(actionId);\n\n    const asyncHandlers = this._bindAsyncHandlers({\n      begin: beginHandler,\n      success: successHandler,\n      failure: failureHandler,\n    });\n\n    this._asyncHandlers[actionId] = asyncHandlers;\n  }\n\n  registerAll(handler) {\n    if (typeof handler !== 'function') return;\n\n    this._catchAllHandlers.push(handler.bind(this));\n  }\n\n  registerAllAsync(beginHandler, successHandler, failureHandler) {\n    const asyncHandlers = this._bindAsyncHandlers({\n      begin: beginHandler,\n      success: successHandler,\n      failure: failureHandler,\n    });\n\n    Object.keys(asyncHandlers).forEach((key) => {\n      this._catchAllAsyncHandlers[key].push(\n        asyncHandlers[key]\n      );\n    });\n  }\n\n  _bindAsyncHandlers(asyncHandlers) {\n    for (let key in asyncHandlers) {\n      if (!asyncHandlers.hasOwnProperty(key)) continue;\n\n      const handler = asyncHandlers[key];\n\n      if (typeof handler === 'function') {\n        asyncHandlers[key] = handler.bind(this);\n      } else {\n        delete asyncHandlers[key];\n      }\n    }\n\n    return asyncHandlers;\n  }\n\n  waitFor(tokensOrStores) {\n    this._waitFor(tokensOrStores);\n  }\n\n  handler(payload) {\n    const {\n      body,\n      actionId,\n      async: _async,\n      actionArgs,\n      error\n    } = payload;\n\n    const _allHandlers = this._catchAllHandlers;\n    const _handler = this._handlers[actionId];\n\n    const _allAsyncHandlers = this._catchAllAsyncHandlers[_async];\n    const _asyncHandler = this._asyncHandlers[actionId]\n      && this._asyncHandlers[actionId][_async];\n\n    if (_async) {\n      let beginOrFailureHandlers = _allAsyncHandlers.concat([_asyncHandler]);\n\n      switch (_async) {\n        case 'begin':\n          this._performHandler(beginOrFailureHandlers, actionArgs);\n          return;\n        case 'failure':\n          this._performHandler(beginOrFailureHandlers, [error.concat(actionArgs)]);\n          return;\n        case 'success':\n          this._performHandler(_allAsyncHandlers.concat([\n            (_asyncHandler || _handler)\n          ]), [body]);\n          return;\n        default:\n          return;\n      }\n    }\n\n    this._performHandler(_allHandlers.concat([_handler]), [body]);\n  }\n\n  _performHandler(_handlers, args) {\n    this._isHandlingDispatch = true;\n    this._pendingState = this._assignState(undefined, this.state);\n    this._emitChangeAfterHandlingDispatch = false;\n\n    try {\n      this._performHandlers(_handlers, args);\n    } finally {\n      if (this._emitChangeAfterHandlingDispatch) {\n        this.state = this._pendingState;\n        this.emit('change');\n      }\n\n      this._isHandlingDispatch = false;\n      this._pendingState = undefined;\n      this._emitChangeAfterHandlingDispatch = false;\n    }\n  }\n\n  _performHandlers(_handlers, args) {\n    _handlers.forEach(function(_handler) {\n      if (typeof _handler !== 'function') return;\n      _handler.apply(this, args);\n    }.bind(this));\n  }\n}\n\nfunction ensureActionId(actionOrActionId) {\n  return typeof actionOrActionId === 'function'\n    ? actionOrActionId._id\n    : actionOrActionId;\n}\n"]}