{"version":3,"sources":["../../../src/addons/__tests__/FluxComponent-test.js"],"names":[],"mappings":"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","file":"src/addons/__tests__/FluxComponent-test.js","sourcesContent":["import { Flummox, Store, Actions } from '../../Flux';\nimport addContext from './addContext';\n\nimport React from 'react/addons';\nconst { TestUtils } = React.addons;\n\nimport FluxComponent from '../FluxComponent';\nimport sinon from 'sinon';\n\ndescribe('FluxComponent', () => {\n\n  class TestActions extends Actions {\n    getSomething(something) {\n      return something;\n    }\n  }\n\n  class TestStore extends Store {\n    constructor(flux) {\n      super();\n\n      const testActions = flux.getActions('test');\n      this.register(testActions.getSomething, this.handleGetSomething);\n\n      this.state = {\n        something: null\n      };\n    }\n\n    handleGetSomething(something) {\n      this.setState({ something });\n    }\n  }\n\n  class Flux extends Flummox {\n    constructor() {\n      super();\n\n      this.createActions('test', TestActions);\n      this.createStore('test', TestStore, this);\n    }\n  }\n\n  it('gets Flux property from either props or context', () => {\n    const flux = new Flux();\n    let contextComponent, propsComponent;\n\n    const ContextComponent = addContext(\n      FluxComponent,\n      { flux },\n      { flux: React.PropTypes.instanceOf(Flummox) }\n    );\n\n    const tree = TestUtils.renderIntoDocument(<ContextComponent />);\n\n    contextComponent = TestUtils.findRenderedComponentWithType(\n      tree, FluxComponent\n    );\n\n    propsComponent = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux} />\n    );\n\n    expect(contextComponent.flux).to.be.an.instanceof(Flummox);\n    expect(propsComponent.flux).to.be.an.instanceof(Flummox);\n  });\n\n  it('allows for FluxComponents through the tree via context', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    class TopView extends React.Component {\n      render() {\n        return (\n          <FluxComponent flux={flux}>\n            <SubView />\n          </FluxComponent>\n        );\n      }\n    }\n\n    class SubView extends React.Component {\n      render() {\n        return <SubSubView />;\n      }\n    }\n\n    class SubSubView extends React.Component {\n      render() {\n        return (\n          <FluxComponent connectToStores=\"test\">\n            <div />\n          </FluxComponent>\n        );\n      }\n    }\n\n    const tree = TestUtils.renderIntoDocument(\n      <TopView />\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    actions.getSomething('something good');\n    expect(div.props.something).to.equal('something good');\n  });\n\n  it('passes connectToStore prop to reactComponentMethod connectToStores()', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    const component = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux} connectToStores=\"test\" />\n    );\n\n    actions.getSomething('something good');\n    expect(component.state.something).to.deep.equal('something good');\n    actions.getSomething('something else');\n    expect(component.state.something).to.deep.equal('something else');\n  });\n\n  it('passes stateGetter prop to reactComponentMethod connectToStores()', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n    const stateGetter = sinon.stub().returns({ fiz: 'bin' });\n\n    const component = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux} connectToStores=\"test\" stateGetter={stateGetter} />\n    );\n\n    expect(component.state.fiz).to.equal('bin');\n  });\n\n  it('injects children with flux prop', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux}>\n        <div />\n      </FluxComponent>\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    expect(div.props.flux).to.equal(flux);\n  });\n\n  it('injects children with props corresponding to component state', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux} connectToStores=\"test\">\n        <div />\n      </FluxComponent>\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    actions.getSomething('something good');\n    expect(div.props.something).to.equal('something good');\n    actions.getSomething('something else');\n    expect(div.props.something).to.equal('something else');\n  });\n\n  it('injects children with any extra props', () => {\n    const flux = new Flux();\n    const stateGetter = () => {};\n\n    // Pass all possible PropTypes to ensure only extra props\n    // are injected.\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent\n        flux={flux}\n        connectToStores=\"test\"\n        stateGetter={stateGetter}\n        extraProp=\"hello\"\n        render={(props) => <div {...props} />}\n      />\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    expect(div.props.extraProp).to.equal('hello');\n    expect(Object.keys(div.props)).to.deep.equal(['flux', 'extraProp']);\n  });\n\n  it('wraps multiple children in span tag', () => {\n    const flux = new Flux();\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux}>\n        <div />\n        <div />\n      </FluxComponent>\n    );\n\n    const wrapper = TestUtils.findRenderedDOMComponentWithTag(tree, 'span');\n    const divs = TestUtils.scryRenderedDOMComponentsWithTag(tree, 'div');\n\n    expect(divs.length).to.equal(2);\n  });\n\n  it('does not wrap single child in span tag', () => {\n    const flux = new Flux();\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux}>\n        <div />\n      </FluxComponent>\n    );\n\n    expect(\n      TestUtils.findRenderedDOMComponentWithTag.bind(TestUtils, tree, 'span')\n    ).to.throw('Did not find exactly one match for tag:span');\n  });\n\n  it('allows for nested FluxComponents', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent flux={flux} connectToStores=\"test\">\n        <FluxComponent>\n          <div />\n        </FluxComponent>\n      </FluxComponent>\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    actions.getSomething('something good');\n    expect(div.props.something).to.equal('something good');\n    actions.getSomething('something else');\n    expect(div.props.something).to.equal('something else');\n  });\n\n  it('uses `render` prop for custom rendering, if it exists', () => {\n    const flux = new Flux();\n    const actions = flux.getActions('test');\n\n    const tree = TestUtils.renderIntoDocument(\n      <FluxComponent\n        flux={flux}\n        connectToStores=\"test\"\n        render={props =>\n          <div something={props.something} />\n        }\n      />\n    );\n\n    const div = TestUtils.findRenderedDOMComponentWithTag(tree, 'div');\n\n    actions.getSomething('something good');\n    expect(div.props.something).to.equal('something good');\n    actions.getSomething('something else');\n    expect(div.props.something).to.equal('something else');\n  });\n\n  it('updates with render-time computed values in state getters on componentWillReceiveProps()', () => {\n    const flux = new Flux();\n\n    class Owner extends React.Component {\n      constructor(props) {\n        super(props);\n\n        this.state = {\n          foo: 'bar'\n        };\n      }\n\n      render() {\n        return (\n          <FluxComponent\n            flux={flux}\n            connectToStores={{\n              test: store => ({\n                yay: this.state.foo\n              })\n            }}\n            render={storeState => <div {...storeState} />}\n          />\n        );\n      }\n    }\n\n    const owner = TestUtils.renderIntoDocument(<Owner />);\n    const div = TestUtils.findRenderedDOMComponentWithTag(owner, 'div');\n\n    expect(div.props.yay).to.equal('bar');\n    owner.setState({ foo: 'baz' });\n    expect(div.props.yay).to.equal('baz');\n  });\n\n});\n"]}