{"version":3,"sources":["../../src/addons/fluxMixin.js"],"names":[],"mappings":";;;;iBA6BwB,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;IALxB,SAAS,WAAQ,OAAO,EAAxB,SAAS;;IACT,IAAI,WAAQ,SAAS,EAArB,IAAI;;qCACqC,yBAAyB;;IAAlE,eAAe,0BAAf,eAAe;IAAE,gBAAgB,0BAAhB,gBAAgB;;IACnC,MAAM,2BAAM,eAAe;;AAEnB,SAAS,SAAS,GAAU;oCAAN,IAAI;AAAJ,QAAI;;;AACvC,WAAS,eAAe,GAAG;;;AACzB,QAAI,CAAC,UAAU,EAAE,CAAC;AAClB,WAAO,QAAA,IAAI,EAAC,eAAe,MAAA,OAAI,IAAI,CAAC,CAAC;GACtC;;AAED,SAAO,MAAM,CACX,EAAE,eAAe,EAAf,eAAe,EAAE,EACnB,eAAe,EACf,gBAAgB,CACjB,CAAC;CACH","file":"src/addons/fluxMixin.js","sourcesContent":["/**\n * fluxMixin\n *\n * Exports a function that creates a React component mixin. Implements methods\n * from reactComponentMethods.\n *\n * Any arguments passed to the mixin creator are passed to `connectToStores()`\n * and used as the return value of `getInitialState()`. This lets you handle\n * all of the state initialization and updates in a single place, while removing\n * the burden of manually adding and removing store listeners.\n *\n * @example\n * let Component = React.createClass({\n *   mixins: [fluxMixin({\n *     storeA: store => ({\n *       foo: store.state.a,\n *     }),\n *     storeB: store => ({\n *       bar: store.state.b,\n *     })\n *   }]\n * });\n */\n\nimport { PropTypes } from 'react';\nimport { Flux } from '../Flux';\nimport { instanceMethods, staticProperties } from './reactComponentMethods';\nimport assign from 'object-assign';\n\nexport default function fluxMixin(...args) {\n  function getInitialState() {\n    this.initialize();\n    return this.connectToStores(...args);\n  }\n\n  return assign(\n    { getInitialState },\n    instanceMethods,\n    staticProperties\n  );\n};\n"]}