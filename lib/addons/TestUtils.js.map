{"version":3,"sources":["../../src/addons/TestUtils.js"],"names":[],"mappings":";;;;;;QAIgB,cAAc,GAAd,cAAc;;;;;;;;;;;;;;;;QAmBd,mBAAmB,GAAnB,mBAAmB;;;;;AAnB5B,SAAS,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE;AAClD,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;AACxC,OAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAR,QAAQ,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAC;CACnC;;AAgBM,SAAS,mBAAmB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAW;oCAAN,IAAI;AAAJ,QAAI;;;AACrE,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;AACxC,MAAM,OAAO,GAAG;AACd,YAAQ,EAAR,QAAQ,EAAE,KAAK,EAAE,WAAW;GAC7B,CAAC;;AAEF,UAAO,WAAW;AAChB,SAAK,OAAO;AACV,UAAI,IAAI,CAAC,MAAM,EAAE;AACf,eAAO,CAAC,UAAU,GAAG,IAAI,CAAC;OAC3B;AACD,YAAM;AAAA,AACR,SAAK,SAAS;AACZ,aAAO,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,YAAM;AAAA,AACR,SAAK,SAAS;AACZ,aAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,YAAM;AAAA,AACR;AACE,YAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;AAAA,GAC5E;;AAED,OAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;CACxB;;AAED,SAAS,cAAc,CAAC,gBAAgB,EAAE;AACxC,SAAO,OAAO,gBAAgB,KAAK,UAAU,GACzC,gBAAgB,CAAC,GAAG,GACpB,gBAAgB,CAAC;CACtB","file":"src/addons/TestUtils.js","sourcesContent":["/**\n * Used for simulating actions on stores when testing.\n *\n */\nexport function simulateAction(store, action, body) {\n  const actionId = ensureActionId(action);\n  store.handler({ actionId, body });\n}\n\n/**\n * Used for simulating asynchronous actions on stores when testing.\n *\n * asyncAction must be one of the following: begin, success or failure.\n *\n * When simulating the 'begin' action, all arguments after 'begin' will\n * be passed to the action handler in the store.\n *\n * @example\n *\n * TestUtils.simulateActionAsync(store, 'actionId', 'begin', 'arg1', 'arg2');\n * TestUtils.simulateActionAsync(store, 'actionId', 'success', { foo: 'bar' });\n * TestUtils.simulateActionAsync(store, 'actionId', 'failure', new Error('action failed'));\n */\nexport function simulateActionAsync(store, action, asyncAction, ...args) {\n  const actionId = ensureActionId(action);\n  const payload = {\n    actionId, async: asyncAction\n  };\n\n  switch(asyncAction) {\n    case 'begin':\n      if (args.length) {\n        payload.actionArgs = args;\n      }\n      break;\n    case 'success':\n      payload.body = args[0];\n      break;\n    case 'failure':\n      payload.error = args[0];\n      break;\n    default:\n      throw new Error('asyncAction must be one of: begin, success or failure');\n  }\n\n  store.handler(payload);\n}\n\nfunction ensureActionId(actionOrActionId) {\n  return typeof actionOrActionId === 'function'\n    ? actionOrActionId._id\n    : actionOrActionId;\n}\n"]}