{"version":3,"sources":["../src/Actions.js"],"names":[],"mappings":"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","file":"src/Actions.js","sourcesContent":["/**\n * Actions\n *\n * Instances of the Actions class represent a set of actions. (In Flux parlance,\n * these might be more accurately denoted as Action Creators, while Action\n * refers to the payload sent to the dispatcher, but this is... confusing. We\n * will use Action to mean the function you call to trigger a dispatch.)\n *\n * Create actions by extending from the base Actions class and adding methods.\n * All methods on the prototype (except the constructor) will be\n * converted into actions. The return value of an action is used as the body\n * of the payload sent to the dispatcher.\n */\n\nimport uniqueId from 'uniqueid';\n\nexport default class Actions {\n\n  constructor() {\n\n    this._baseId = uniqueId();\n\n    const methodNames = this._getActionMethodNames();\n    for (let i = 0; i < methodNames.length; i++) {\n      const methodName = methodNames[i];\n      this._wrapAction(methodName);\n    }\n\n    this.getConstants = this.getActionIds;\n  }\n\n  getActionIds() {\n    return this._getActionMethodNames().reduce((result, actionName) => {\n      result[actionName] = this[actionName]._id;\n      return result;\n    }, {});\n  }\n\n  _getActionMethodNames(instance) {\n    return Object.getOwnPropertyNames(this.constructor.prototype)\n      .filter(name =>\n        name !== 'constructor' &&\n        typeof this[name] === 'function'\n      );\n  }\n\n  _wrapAction(methodName) {\n    const originalMethod = this[methodName];\n    const actionId = this._createActionId(methodName);\n\n    const action = (...args) => {\n      const body = originalMethod.apply(this, args);\n\n      if (isPromise(body)) {\n        const promise = body;\n        this._dispatchAsync(actionId, promise, args, methodName)\n          // Catch errors and do nothing\n          // They can be handled by store or caller\n          .catch(error => {});\n      } else {\n        this._dispatch(actionId, body, args, methodName);\n      }\n\n      // Return original method's return value to caller\n      return body;\n    };\n\n    action._id = actionId;\n\n    this[methodName] = action;\n  }\n\n  /**\n   * Create unique string constant for an action method, using\n   * @param {string} methodName - Name of the action method\n   */\n  _createActionId(methodName) {\n    return `${this._baseId}-${methodName}`;\n  }\n\n  _dispatch(actionId, body, args, methodName) {\n    if (typeof this.dispatch === 'function') {\n      if (typeof body !== 'undefined') {\n        this.dispatch(actionId, body, args);\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `You've attempted to perform the action `\n        + `${this.constructor.name}#${methodName}, but it hasn't been added `\n        + `to a Flux instance.`\n        );\n      }\n    }\n\n    return body;\n  }\n\n  _dispatchAsync(actionId, promise, args, methodName) {\n    if (typeof this.dispatchAsync === 'function') {\n      return this.dispatchAsync(actionId, promise, args);\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `You've attempted to perform the asynchronous action `\n        + `${this.constructor.name}#${methodName}, but it hasn't been added `\n        + `to a Flux instance.`\n        );\n      }\n\n      return promise;\n    }\n\n  }\n\n}\n\nfunction isPromise(value) {\n  return value && typeof value.then === 'function';\n}\n"]}