var Flummox=function(t){function e(i){if(n[i])return n[i].exports;var s=n[i]={exports:{},id:i,loaded:!1};return t[i].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function i(t){return t.prototype.constructor.name}function s(t){var e=[];for(var n in t)t.hasOwnProperty(n)&&e.push(t[n]);return e}var r=function(t){return t&&t.__esModule?t["default"]:t},a=function(t,e){var n=Object.create(t.prototype),i=t.apply(n,e);return null==i||"object"!=typeof i&&"function"!=typeof i?n:i},o=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),c=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},h=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")};Object.defineProperty(e,"__esModule",{value:!0});var u=r(n(1)),p=r(n(2)),f=n(3).Dispatcher,l=r(n(4)),d=function(t){function e(){h(this,e),this.dispatcher=new f,this._stores={},this._actions={}}return c(e,t),o(e,{createStore:{value:function(t,e){for(var n=arguments.length,s=Array(n>2?n-2:0),r=2;n>r;r++)s[r-2]=arguments[r];if(!(e.prototype instanceof u)){var o=i(e);throw new Error("You've attempted to create a store from the class "+o+", which does not have the base Store class in its prototype chain. Make sure "+("you're using the `extends` keyword: `class "+o+" extends ")+"Store { ... }`")}if(this._stores.hasOwnProperty(t)&&this._stores[t])throw new Error("You've attempted to create multiple stores with key "+t+". Keys must be unique.");var c=a(e,s),h=this.dispatcher.register(c.handler.bind(c));return c._waitFor=this.waitFor.bind(this),c._token=h,c._getAllActionIds=this.getAllActionIds.bind(this),this._stores[t]=c,c}},getStore:{value:function(t){return this._stores.hasOwnProperty(t)?this._stores[t]:void 0}},createActions:{value:function(t,e){for(var n=arguments.length,s=Array(n>2?n-2:0),r=2;n>r;r++)s[r-2]=arguments[r];if(!(e.prototype instanceof p)&&e!==p){var o=i(e);throw new Error("You've attempted to create actions from the class "+o+", which does not have the base Actions class in its prototype chain. Make "+("sure you're using the `extends` keyword: `class "+o+" ")+"extends Actions { ... }`")}if(this._actions.hasOwnProperty(t)&&this._actions[t])throw new Error("You've attempted to create multiple actions with key "+t+". Keys must be unique.");var c=a(e,s);return c.dispatch=this.dispatch.bind(this),c.dispatchAsync=this.dispatchAsync.bind(this),this._actions[t]=c,c}},getActions:{value:function(t){return this._actions.hasOwnProperty(t)?this._actions[t]:void 0}},getActionIds:{value:function(t){var e=this.getActions(t);if(e)return e.getConstants()}},getAllActionIds:{value:function(){var t=[];for(var e in this._actions)if(this._actions.hasOwnProperty(e)){var n=this._actions[e].getConstants();t=t.concat(s(n))}return t}},dispatch:{value:function(t,e){this._dispatch({actionId:t,body:e})}},dispatchAsync:{value:function(t,e,n){var i=this,s={actionId:t,async:"begin"};return n&&(s.actionArgs=n),this._dispatch(s),e.then(function(e){return i._dispatch({actionId:t,body:e,async:"success"}),e},function(e){return i._dispatch({actionId:t,error:e,actionArgs:n,async:"failure"}),Promise.reject(e)})["catch"](function(t){return i.emit("error",t),Promise.reject(t)})}},_dispatch:{value:function(t){this.dispatcher.dispatch(t),this.emit("dispatch",t)}},waitFor:{value:function(t){Array.isArray(t)||(t=[t]);var e=function(t){return t instanceof u?t._token:t},n=t.map(e);this.dispatcher.waitFor(n)}},removeAllStoreListeners:{value:function(t){for(var e in this._stores)if(this._stores.hasOwnProperty(e)){var n=this._stores[e];n.removeAllListeners(t)}}},serialize:{value:function n(){var t={};for(var e in this._stores)if(this._stores.hasOwnProperty(e)){var i=this._stores[e],n=i.constructor.serialize;if("function"==typeof n){var s=n(i.state);if("string"!=typeof s){i.constructor.name}if(t[e]=s,"function"!=typeof i.constructor.deserialize){i.constructor.name}}}return JSON.stringify(t)}},deserialize:{value:function r(t){var e=void 0;try{e=JSON.parse(t)}catch(n){{this.constructor.name}}for(var i in this._stores)if(this._stores.hasOwnProperty(i)){var s=this._stores[i],r=s.constructor.deserialize;if("function"==typeof r){var a=e[i],o=r(a);if(s.replaceState(o),"function"!=typeof s.constructor.serialize){s.constructor.name}}}}}}),e}(l);e["default"]=d,d.prototype.getConstants=d.prototype.getActionIds,d.prototype.getAllConstants=d.prototype.getAllActionIds,d.prototype.dehydrate=d.prototype.serialize,d.prototype.hydrate=d.prototype.deserialize;var v=d;e.Flux=d,e.Flummox=v,e.Store=u,e.Actions=p},function(t,e,n){"use strict";function i(t){return"function"==typeof t?t._id:t}var s=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},c=s(n(4)),h=s(n(6)),u=function(t){function e(){o(this,e),this.state=null,this._handlers={},this._asyncHandlers={},this._catchAllHandlers=[],this._catchAllAsyncHandlers={begin:[],success:[],failure:[]}}return a(e,t),r(e,{setState:{value:function(t){if("function"==typeof t){var e=this._isHandlingDispatch?this._pendingState:this.state;t=t(e)}this._isHandlingDispatch?(this._pendingState=this._assignState(this._pendingState,t),this._emitChangeAfterHandlingDispatch=!0):(this.state=this._assignState(this.state,t),this.emit("change"))}},replaceState:{value:function(t){this._isHandlingDispatch?(this._pendingState=this._assignState(void 0,t),this._emitChangeAfterHandlingDispatch=!0):(this.state=this._assignState(void 0,t),this.emit("change"))}},getStateAsObject:{value:function(){return this.state}},_assignState:{value:function(){for(var t=arguments.length,n=Array(t),i=0;t>i;i++)n[i]=arguments[i];return(this.constructor.assignState||e.assignState).apply(void 0,n)}},forceUpdate:{value:function(){this._isHandlingDispatch?this._emitChangeAfterHandlingDispatch=!0:this.emit("change")}},register:{value:function(t,e){t=i(t),"function"==typeof e&&(this._handlers[t]=e.bind(this))}},registerAsync:{value:function(t,e,n,s){t=i(t);var r=this._bindAsyncHandlers({begin:e,success:n,failure:s});this._asyncHandlers[t]=r}},registerAll:{value:function(t){"function"==typeof t&&this._catchAllHandlers.push(t.bind(this))}},registerAllAsync:{value:function(t,e,n){var i=this,s=this._bindAsyncHandlers({begin:t,success:e,failure:n});Object.keys(s).forEach(function(t){i._catchAllAsyncHandlers[t].push(s[t])})}},_bindAsyncHandlers:{value:function(t){for(var e in t)if(t.hasOwnProperty(e)){var n=t[e];"function"==typeof n?t[e]=n.bind(this):delete t[e]}return t}},waitFor:{value:function(t){this._waitFor(t)}},handler:{value:function(t){var e=t.body,n=t.actionId,i=t.async,s=t.actionArgs,r=t.error,a=this._catchAllHandlers,o=this._handlers[n],c=this._catchAllAsyncHandlers[i],h=this._asyncHandlers[n]&&this._asyncHandlers[n][i];if(i){var u=c.concat([h]);switch(i){case"begin":return void this._performHandler(u,s);case"failure":return void this._performHandler(u,[r.concat(s)]);case"success":return void this._performHandler(c.concat([h||o]),[e]);default:return}}this._performHandler(a.concat([o]),[e])}},_performHandler:{value:function(t,e){this._isHandlingDispatch=!0,this._pendingState=this._assignState(void 0,this.state),this._emitChangeAfterHandlingDispatch=!1;try{this._performHandlers(t,e)}finally{this._emitChangeAfterHandlingDispatch&&(this.state=this._pendingState,this.emit("change")),this._isHandlingDispatch=!1,this._pendingState=void 0,this._emitChangeAfterHandlingDispatch=!1}}},_performHandlers:{value:function(t,e){t.forEach(function(t){"function"==typeof t&&t.apply(this,e)}.bind(this))}}},{assignState:{value:function(t,e){return h({},t,e)}}}),e}(c);t.exports=u},function(t,e,n){"use strict";function i(t){return t&&"function"==typeof t.then}var s=function(t){return t&&t.__esModule?t["default"]:t},r=function(){function t(t,e){for(var n in e){var i=e[n];i.configurable=!0,i.value&&(i.writable=!0)}Object.defineProperties(t,e)}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},o=s(n(7)),c=function(){function t(){a(this,t),this._baseId=o();for(var e=this._getActionMethodNames(),n=0;n<e.length;n++){var i=e[n];this._wrapAction(i)}this.getConstants=this.getActionIds}return r(t,{getActionIds:{value:function(){var t=this;return this._getActionMethodNames().reduce(function(e,n){return e[n]=t[n]._id,e},{})}},_getActionMethodNames:{value:function(){var t=this;return Object.getOwnPropertyNames(this.constructor.prototype).filter(function(e){return"constructor"!==e&&"function"==typeof t[e]})}},_wrapAction:{value:function(t){var e=this,n=this[t],s=this._createActionId(t),r=function(){for(var r=arguments.length,a=Array(r),o=0;r>o;o++)a[o]=arguments[o];var c=n.apply(e,a);if(i(c)){var h=c;e._dispatchAsync(s,h,a,t)["catch"](function(){})}else e._dispatch(s,c,a,t);return c};r._id=s,this[t]=r}},_createActionId:{value:function(t){return""+this._baseId+"-"+t}},_dispatch:{value:function(t,e,n,i){return"function"==typeof this.dispatch&&"undefined"!=typeof e&&this.dispatch(t,e,n),e}},_dispatchAsync:{value:function(t,e,n,i){return"function"==typeof this.dispatchAsync?this.dispatchAsync(t,e,n):e}}}),t}();t.exports=c},function(t,e,n){t.exports.Dispatcher=n(5)},function(t){"use strict";function e(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function n(){}n.prototype._events=void 0,n.prototype.listeners=function(t){if(!this._events||!this._events[t])return[];if(this._events[t].fn)return[this._events[t].fn];for(var e=0,n=this._events[t].length,i=new Array(n);n>e;e++)i[e]=this._events[t][e].fn;return i},n.prototype.emit=function(t,e,n,i,s,r){if(!this._events||!this._events[t])return!1;var a,o,c=this._events[t],h=arguments.length;if("function"==typeof c.fn){switch(c.once&&this.removeListener(t,c.fn,!0),h){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,i),!0;case 5:return c.fn.call(c.context,e,n,i,s),!0;case 6:return c.fn.call(c.context,e,n,i,s,r),!0}for(o=1,a=new Array(h-1);h>o;o++)a[o-1]=arguments[o];c.fn.apply(c.context,a)}else{var u,p=c.length;for(o=0;p>o;o++)switch(c[o].once&&this.removeListener(t,c[o].fn,!0),h){case 1:c[o].fn.call(c[o].context);break;case 2:c[o].fn.call(c[o].context,e);break;case 3:c[o].fn.call(c[o].context,e,n);break;default:if(!a)for(u=1,a=new Array(h-1);h>u;u++)a[u-1]=arguments[u];c[o].fn.apply(c[o].context,a)}}return!0},n.prototype.on=function(t,n,i){var s=new e(n,i||this);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],s]:this._events[t].push(s):this._events[t]=s,this},n.prototype.once=function(t,n,i){var s=new e(n,i||this,!0);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],s]:this._events[t].push(s):this._events[t]=s,this},n.prototype.removeListener=function(t,e,n){if(!this._events||!this._events[t])return this;var i=this._events[t],s=[];if(e&&(i.fn&&(i.fn!==e||n&&!i.once)&&s.push(i),!i.fn))for(var r=0,a=i.length;a>r;r++)(i[r].fn!==e||n&&!i[r].once)&&s.push(i[r]);return s.length?this._events[t]=1===s.length?s[0]:s:delete this._events[t],this},n.prototype.removeAllListeners=function(t){return this._events?(t?delete this._events[t]:this._events={},this):this},n.prototype.off=n.prototype.removeListener,n.prototype.addListener=n.prototype.on,n.prototype.setMaxListeners=function(){return this},n.EventEmitter=n,n.EventEmitter2=n,n.EventEmitter3=n,t.exports=n},function(t,e,n){"use strict";function i(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var s=n(8),r=1,a="ID_";i.prototype.register=function(t){var e=a+r++;return this.$Dispatcher_callbacks[e]=t,e},i.prototype.unregister=function(t){s(this.$Dispatcher_callbacks[t],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",t),delete this.$Dispatcher_callbacks[t]},i.prototype.waitFor=function(t){s(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var e=0;e<t.length;e++){var n=t[e];this.$Dispatcher_isPending[n]?s(this.$Dispatcher_isHandled[n],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",n):(s(this.$Dispatcher_callbacks[n],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",n),this.$Dispatcher_invokeCallback(n))}},i.prototype.dispatch=function(t){s(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(t);try{for(var e in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[e]||this.$Dispatcher_invokeCallback(e)}finally{this.$Dispatcher_stopDispatching()}},i.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},i.prototype.$Dispatcher_invokeCallback=function(t){this.$Dispatcher_isPending[t]=!0,this.$Dispatcher_callbacks[t](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[t]=!0},i.prototype.$Dispatcher_startDispatching=function(t){for(var e in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[e]=!1,this.$Dispatcher_isHandled[e]=!1;this.$Dispatcher_pendingPayload=t,this.$Dispatcher_isDispatching=!0},i.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},t.exports=i},function(t){"use strict";function e(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=Object.assign||function(t){for(var n,i,s=e(t),r=1;r<arguments.length;r++){n=arguments[r],i=Object.keys(Object(n));for(var a=0;a<i.length;a++)s[i[a]]=n[i[a]]}return s}},function(t){"use strict";var e=0,n=t.exports=function(t){t=t||{};var n=t.prefix,i=t.suffix,s=++e*(t.multiplier||1);return null==n&&(n=""),null==i&&(i=""),String(n)+s+String(i)};n.reset=function(){return e=0}},function(t){"use strict";var e=function(t,e,n,i,s,r,a,o){if(!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var h=[n,i,s,r,a,o],u=0;c=new Error("Invariant Violation: "+e.replace(/%s/g,function(){return h[u++]}))}throw c.framesToPop=1,c}};t.exports=e}]);
//# sourceMappingURL=data:application/json;base64,